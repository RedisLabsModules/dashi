name: Deploy
on:
  push:
    branches: [main]
env:
  DASHI_IP: placeholder
  REPOSITORY_URI: placeholder
  DEFAULT_REGION: eu-west-1
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - uses: actions/checkout@v2

      - name: install cdk
        working-directory: cdk
        run: |
          npm install -g aws-cdk
          pip install -r requirements.txt

      - name: cdk bootstrap
        working-directory: cdk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.DEFAULT_REGION }}
        run: |
          cdk bootstrap

      - name: cdk diff
        working-directory: cdk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.DEFAULT_REGION }}
        run: |
          cdk --stack DashiStack diff 

      - name: cdk deploy
        working-directory: cdk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.DEFAULT_REGION }}
        run: |
          cdk --stack DashiStack deploy --require-approval never --outputs-file out.json -c my_ip=${{ steps.ip.outputs.ipv4 }}

      - name: populate env
        working-directory: cdk
        run: |
          echo "REPOSITORY_URI=`cat out.json | jq -r .DashiStack.DashiRepo`" >> $GITHUB_ENV
          echo "DASHI_IP=`cat out.json | jq -r .DashiStack.DashiIp`" >> $GITHUB_ENV
          sed -i 's/BUCKUP_BUCKET/$(cat out.json | jq -r .DashiStack.DashiBuckupBucket)/g' ../dockers/app/backup-s3.sh


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPOSITORY_URI }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CIRCLE_CI_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}
          IMAGE_TAG: latest
        run: |
          docker-compose build
          docker-compose push
          docker-compose config > docker-compose-run.yml
          
      - name: save cert/key
        run: |
          echo "${{ secrets.DASHI_SSL_CRT }}" > dashi.crt
          echo "${{ secrets.DASHI_SSL_KEY }}" > dashi.key

      - name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.DASHI_IP }}
          username: ${{ secrets.DASHI_USERNAME }}
          port: ${{ secrets.DASHI_PORT }}
          key: ${{ secrets.DASHI_KEY }}
          source: "docker-compose-run.yml,dashi.crt,dashi.key,dockers/app/backup-s3.sh"
          target: "dashi"

      - name: run containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DASHI_IP }}
          username: ${{ secrets.DASHI_USERNAME }}
          port: ${{ secrets.DASHI_PORT }}
          key: ${{ secrets.DASHI_KEY }}
          script_stop: true
          script: |
            $(aws ecr get-login --no-include-email --region ${{ env.DEFAULT_REGION }})
            docker-compose -f dashi/docker-compose-run.yml pull
            docker-compose -f dashi/docker-compose-run.yml up -d --no-build
            cp dashi/dockers/app/backup-s3.sh /etc/cron.daily/

      - name: cdk deploy to remove tmp ip
        working-directory: cdk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.DEFAULT_REGION }}
        run: |
          cdk --stack DashiStack deploy --require-approval never
